# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  pages(relativePath: String): Pages!
  pagesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PagesFilter): PagesConnection!
  projects(relativePath: String): Projects!
  projectsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ProjectsFilter): ProjectsConnection!
}

input DocumentFilter {
  pages: PagesFilter
  projects: ProjectsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Pages | Projects

type Pages implements Node & Document {
  subtitle: String
  skip_nav: String
  projects_heading: String
  cv_heading: String
  dowload_cv_label: String
  copyright: String
  itch_btn: String
  read_more: String
  intro: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PagesFilter {
  subtitle: StringFilter
  skip_nav: StringFilter
  projects_heading: StringFilter
  cv_heading: StringFilter
  dowload_cv_label: StringFilter
  copyright: StringFilter
  itch_btn: StringFilter
  read_more: StringFilter
  intro: RichTextFilter
}

type PagesConnectionEdges {
  cursor: String!
  node: Pages
}

type PagesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PagesConnectionEdges]
}

type Projects implements Node & Document {
  title: String
  tags: [String]
  description: String
  imgAlt: String
  imgSrc: String
  github: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ProjectsBodyGitHubBtnFilter {
  href: StringFilter
}

input ProjectsBodyItchBtnFilter {
  href: StringFilter
}

input ProjectsBodyPWABtnFilter {
  href: StringFilter
}

input ProjectsBodyGooglePlayBtnFilter {
  href: StringFilter
}

input ProjectsBodyFilter {
  GitHubBtn: ProjectsBodyGitHubBtnFilter
  ItchBtn: ProjectsBodyItchBtnFilter
  PWABtn: ProjectsBodyPWABtnFilter
  GooglePlayBtn: ProjectsBodyGooglePlayBtnFilter
}

input ProjectsFilter {
  title: StringFilter
  tags: StringFilter
  description: StringFilter
  imgAlt: StringFilter
  imgSrc: ImageFilter
  github: StringFilter
  body: ProjectsBodyFilter
}

type ProjectsConnectionEdges {
  cursor: String!
  node: Projects
}

type ProjectsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ProjectsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePages(relativePath: String!, params: PagesMutation!): Pages!
  createPages(relativePath: String!, params: PagesMutation!): Pages!
  updateProjects(relativePath: String!, params: ProjectsMutation!): Projects!
  createProjects(relativePath: String!, params: ProjectsMutation!): Projects!
}

input DocumentMutation {
  pages: PagesMutation
  projects: ProjectsMutation
}

input PagesMutation {
  subtitle: String
  skip_nav: String
  projects_heading: String
  cv_heading: String
  dowload_cv_label: String
  copyright: String
  itch_btn: String
  read_more: String
  intro: JSON
}

input ProjectsMutation {
  title: String
  tags: [String]
  description: String
  imgAlt: String
  imgSrc: String
  github: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
  